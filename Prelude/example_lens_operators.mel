-- Lens are very useful for getting, setting and upating values within
-- containers such as tuples, lists and trees. Lens operators try to
-- mimic Object Oriented syntax, so, something like...
--
--     player.status.hp += 10
--
-- Can be writen on Caramel as:
--
--     (! player [status, hp] += 10) 
--
-- On this case, `player` is a value, `status` and `hp` are lenses (ideally
-- automatically generated by derivers) and the operators (`!`, `+=`, etc) are
-- just functions defined on `operators.mel`. The fact they are not hardcoded
-- syntax make it is much easier to add new operators on the fly, and do things
-- that the language implementor couldn't predict. For example:
--
--    player.info.name = reverse(player.info.name)
--
-- Can be done more tersely by using the "update" operator, `@=`:
--
--    (! player [info,name] @= reverse)
--
-- Or you could write an operator for list concatenation:
--
--    (! player [inventory] ++= potion)
-- 
-- That is, append a `potion` to `player`'s inventory.
-- The examples below use tuple lenses defined on `tuple.mel`.

lens_ops_set_example  = (! tup123 [triple.first] += 4)
lens_ops_get_example  = (? tup123 [triple.first])
lens_ops_mut_example  = (! ("olleh","world") [pair.first] @= reverse)
lens_ops_deep_example = (! ((1,2),(3,4)) [pair.first,pair.first] += 10)

