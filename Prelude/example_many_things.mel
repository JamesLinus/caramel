-- Evaluate any of those terms by calling `mel term`.

-- Some top level variables
a = 3
b = 2
five = (+ a b)

-- Dependencies are solved recursively so order isn't relevant.
olleh = (reverse hello)
hello = "hello"

-- Tuples, lists...
list_example  = [1, 2, 3]
tuple_example = (1, 2, 3)
six = (sum list_example)

-- Seven :)
seven = (+ a b)
    a = 3
    b = 4

-- Some bools
im_not_true = (and false true)

-- The 10th fib is 55
im_55 = (fib 10)

-- Some tuple stuff
one   = (triple.get_first (1,2,3))
two   = (triple.get_second (1,2,3))
three = (triple.get_third (1,2,3))

-- Tuple application resembles the traditional function syntax
-- using the @ function, defined on "cominators.mel"
ten = (@ add (3,7))

-- Lens combinators are cool for deep updates
-- This adds 10 to the 4 there and becomes ((1,2),(3,14))
lens_are_cool = (! matrix [snd,snd] += 10)
    matrix = ((1,2),(3,4))
    snd    = pair.second

-- I'm out of ideas.
