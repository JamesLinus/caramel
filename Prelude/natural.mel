-- Comments are separated from source for better visualization.
--
-- Natural numbers can be defined as `Nat = Succ Nat | Zero`.
--
-- Caramel's syntax sugar expand ASCII numbers to church-encoded numbers.  
-- They implement `n` applications of a function. For example,
-- (4 f x) is the same as (f (f (f (f x))))
--
-- Some algebraic operations can be then defined very naturally.
--
-- Addition of `a` and `b` is simply applying `succ` `a` times to
-- zero, then applying `succ` `b` times to zero. It could be defined
-- as just `add a b = (a succ (b succ zero))`, but lifting the succ
-- and zero constructors allows for fusions.
--
-- Multiplication of `a` and `b` is just applying `(add b)` `a` times
-- to `zero`. It could be defined as `mul a b = (a (add b))`, but again,
-- lifting `succ` is more efficient.
--
-- Others not so much. Subtraction, division, predecessor and
-- modulus are tricky, and I'm still unsure what is the best 
-- implementation for them.
--
-- Comparison operations like `<=` are often defined inefficiently on literature.
-- An improved version creates two continuators that call eachother while
-- simultaneously folding down the natural number until it reaches the "zero".
-- When it does, it outputs either `true` or `false`, depending on which number
-- reached "zero" first.
--
-- Fib is implemented efficiently as an interactive sequence.

zero     = (succ zero -> zero)
succ nat = (succ zero -> (succ (nat succ zero)))

add a b = (succ zero -> (a succ (b succ zero)))
mul a b = (succ -> (a (b succ)))
pow a b = (a b -> (b a))

pred n  = (succ zero -> (n (g h -> (h (g succ))) (const zero) id))
sub a b = (a asuc (b Succ Zero) (r p -> r) id)
    asuc = (b -> (b (r p -> p) (r -> (s z -> (z (succ r))))))
    Succ = (p s z -> (s zero p))
    Zero = (s z -> (z zero))
mod a b = (tuple.rev_enum b (select_args_mod b a))

mul_of    = (is_zero (mod b a))
is_zero n = (n (const false) true)
equal a b = (and (is_zero (sub a b)) (is_zero (sub b a)))
even      = (mul_of 2)
odd       = (comp not even)

lesser_or_equal a b       = (climb_down a true (climb_down b false))
    climb_down num result = (num (pred cont -> (cont pred)) (const result))

lesser a b                = (lesser_or_equal (succ a) b)
greater_or_equal a b      = (not (lesser a b))
greater a b               = (not (lesser_or_equal a b))

min  = (a b -> (lesser_or_equal a b a b))
max  = (a b -> (lesser_or_equal a b b a))

sequence = (init step end nth -> (nth (t -> (t step)) init end))
fib      = (sequence (0,1) (a b -> (b, (add a b))) (a b -> a))

sum  = (foldr add 0)
prod = (foldr mul 1)

div a b = (a asuc (b Succ Zero 0 Zero) (p r bb -> r) (r bb -> r))
    asuc = (ba -> (ba (p r bb -> (p r (Succ bb))) (r bb -> (bb (succ r) Zero))))
    Succ = (p r bb s z -> (s p r bb))
    Zero = (r bb s z -> (z r bb))

-- Naive functions
naive_sub a b         = (b pred a)
naive_lesser_or_equal = (a b -> (is_zero (sub b a)))

-- Experimental: ADTs and generics for deriving the above definitions automatically.

Nat = #{Succ {pred : *} | Zero}

Succ = (Ctor 1 Nat)
Zero = (Ctor 0 Nat)
nat: = (Fold Nat)
Nat: = (n -> (n Succ Zero))
