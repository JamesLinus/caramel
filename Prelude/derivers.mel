-- (Here shall be dragons)
--
-- Derivers take first-class ADTs and return functions that operate on them.
-- They incorporate most of Haskell's algebraic datatype functionalities,
-- including constructors, pattern matching, deriving, and so on, in a more
-- uniform way. This does not replicate the typechecking side of Haskell's ADT.
--
-- Examples:
--
-- Cons = (Ctor 0 (List Type))
-- This builds the "Cons" function (i.e., the first constructor of the List type).
-- "Type" is a placeholder for incomplete types when the inner type isn't necessary. 
--
-- Head = (Getter 0 0 (List Type)) 
-- This builds the "Head" function (i.e., the getter for the 1st field of the
-- 1st constructor of the List type). The first number refers to the
-- constructor, the second refers to the field.
--
-- (Show (List Bool) (Cons True (Cons False Nil)))
-- Notice that "Show" requires a complete type.
--
-- Note:
--
-- Those derivers were really tricky to figure out and unfortunatelly their
-- code was so bloated I could barely understand it, let alone port to Caramel.
-- So I just took their normals and pasted them here. I hope that I can
-- reimplement them properly soon, since they are one of the cornerstones of
-- the whole language.

Type    = #{}
Ctor    = (a b -> (a (c -> (c (d e f -> e) (d -> d))) (b (c -> (c (d e f g h -> (g (d (i j k -> j) (i -> i) (i -> i) (i j k l -> (j (m -> (k m l)))) (i -> (c (j k l m -> (k (n -> (l n m)))) (j -> (i (j (f (k l -> k) (k -> (f (l m n -> (l (o p -> (p (o m))) (o -> n) (o -> o))) (l -> (c (m -> l))) (l m -> l) k k))) j))) (j -> j))) (i -> i)) (e (i j -> (i (f i j))) g h))) (d e f -> f) (d e -> e))) (c d e -> (e c d)) (c d -> d)) (c d e -> c) (c -> c)))
Fold    = (a -> (a (b -> (b (c d e f -> (d (e (g -> (c (h i j -> (i j (k l m n -> (l (m (k (o p q -> p) (o -> o) n)))) (k -> k))) g f))))) (c -> c)))))
Fmap    = (a b -> (a (c -> (c (d e f g h -> (g (d (i j k -> j) (i -> i) (i -> i) (i j k l -> (j (m -> (k m l)))) (i -> (c (j k l m -> (k (n -> (l n m)))) (j -> (i (j (f (k l -> k) (k -> (f (l m n -> (l (o p -> (p (o m))) (o -> n) (o -> o))) (l -> (c (m -> l))) (l m -> l) k k))) j))) (j -> j))) (i -> i)) (e (i j -> (i (f i j))) g h))) (d e f -> f) (d e -> e) (d e f -> (f d e)) (d e f -> f) (c (d e f g h i -> (h (j -> (d (k l m -> l) (k -> k) j (k l m n -> (l (m (k (o p q -> p) (o -> o) n)))) (k -> k) f)) (g e h i))) (d e f g -> g)) (d e f g -> g) (d e -> d) b (d -> (c (e f g h i -> (h (e (j k l -> k) (j -> j) (j -> j) (j k l m -> (k (n -> (l n m)))) (j -> (c (k l m n -> (l (o -> (m o n)))) (k -> (j (k (g (l m -> l) (l -> (g (m n o -> (m (p q -> (q (p n))) (p -> o) (p -> p))) (m -> (c (n -> m))) (m n -> m) l l))) k))) (k -> k))) (j -> j)) (f (j k -> (j (g j k))) h i))) (e f g -> g) (e f -> f) (e f g -> (g e f)) (e f g -> g) (c (e f g h i j -> (i (k -> (e (l m n -> m) (l -> l) k (l m n o -> (m (n (l (p q r -> q) (p -> p) o)))) (l -> l) g)) (h f i j))) (e f g h -> h)) (e f g -> (f (g e))) (e -> e) d))))))
Zipp    = (a b c -> (a (d -> (d (e f g h i -> (h (e (j k l -> (k l (m n o p -> (n (o (m (q r -> r) p)))) (m -> m) (k l (m n o p -> (n (o p))) (m n -> (m (o p q -> (p (q o))) (o -> o) n)) (k l (m n o p -> (n (q -> (o (q p))))) (m -> (m (k l (n o p -> (o (q r -> (p (s t -> (s r (q s t))))))) (n -> (n (o p -> p))) (n -> n)))) (m -> m)))))) (f (j k -> (j (g j k))) h i))) (e f g -> g) (e f -> f) (e f g h -> h) (e f -> e) (e -> e) (e -> (d (f g h i j -> (i (f (k l m -> (l m (n o p q -> (o (p (n (r s -> s) q)))) (n -> n) (l m (n o p q -> (o (p q))) (n o -> (n (p q r -> (q (r p))) (p -> p) o)) (l m (n o p q -> (o (r -> (p (r q))))) (n -> (n (l m (o p q -> (p (r s -> (q (t u -> (t s (r t u))))))) (o -> (o (p q -> q))) (o -> o)))) (n -> n)))))) (g (k l -> (k (h k l))) i j))) (f g h -> h) (f g -> g) (f g h -> (g (h f))) (f -> f) e)))) b (a (d e -> (d (f g h i j -> (i (f (k l m -> l) (k -> k) (k -> k) (k l m n -> (l (o -> (m o n)))) (k -> (d (l m n o -> (m (p -> (n p o)))) (l -> (k (l (h (m n -> m) (m -> (h (n o p -> (n (q r -> (r (q o))) (q -> p) (q -> q))) (n -> (d (o -> n))) (n o -> n) m m))) l))) (l -> l))) (k -> k)) (g (k l -> (k (h k l))) i j))) (f g h -> h) (f g -> g) (f g h -> (h f g)) (f g h -> h) (d (f g h i j k -> (j (l -> (f (m n o -> n) (m -> m) l (m n o p -> (n (q -> (o (q p))))) (m -> (m (f (n o p -> o) (n -> n) l (n o p -> (o (q r -> (p (s t -> (s r (q s t))))))) (n -> (n (o p -> p))) (n -> (f (o p q -> p) (o -> o) l (o p q r -> (p (s -> (q (s r))))) (o -> (o (f (p q r -> q) (p -> p) l (p q r -> (q (s t -> (r (u v -> (u t (s u v))))))) (p -> (p (q r -> r))) (p -> (p (q r s -> (s q r)) (q r s -> s) (f (q r s -> r) (q -> q) l (q r s -> (s (q (t u v -> u) (t -> t)) r)) (q r s -> s) (n (q r s t u v -> (u (s q) (t r u v))) (q r s t -> t)) (q r s t u v -> (u (s q) (t r u v))) (q r s t -> t)) (q r s -> (r (s q))) (q -> q) h))))) (o -> o)))))) (m -> m))) (i g j k))) (f g h i -> i)) (f g h -> (g (h f))) (f -> f) e)) c)))
Match   = (a -> (a (b -> (b (c d e f -> (d (g -> (e g (h -> f))))) (c -> c) (c -> c)))))
Getter  = (a b c -> (c (d e -> (d (f g h i j -> (i (f (k l m -> l) (k -> k) (k -> k) (k l m n -> (l (o -> (m o n)))) (k -> (d (l m n o -> (m (p -> (n p o)))) (l -> (k (l (h (m n -> m) (m -> (h (n o p -> (n (q r -> (r (q o))) (q -> p) (q -> q))) (n -> (d (o -> n))) (n o -> n) m m))) l))) (l -> l))) (k -> k)) (g (k l -> (k (h k l))) i j))) (f g h -> h) (f g -> g) (f g h -> (h f g)) (f g h -> h) (d (f g h i j k -> (j (l m -> (m (b (n o -> n) (n -> (b (o p q -> (o (r s -> (s (r p))) (r -> q) (r -> r))) (o -> (f (p q r -> q) (p -> p) l (p -> o))) (o p -> o) n n))) h)) (i g j k))) (f g h i -> i)) (f g h -> (h f g)) (f g h -> h) (d (f g h i j -> (i (f (k l m -> l) (k -> k) (k -> k) (k l m n -> (l (o -> (m o n)))) (k -> (d (l m n o -> (m (p -> (n p o)))) (l -> (k (l (h (m n -> m) (m -> (h (n o p -> (n (q r -> (r (q o))) (q -> p) (q -> q))) (n -> (d (o -> n))) (n o -> n) m m))) l))) (l -> l))) (k -> k)) (g (k l -> (k (h k l))) i j))) (f g h -> h) (f g -> g) (f g h -> (h f g)) (f g h -> h) (d (f g h i j k -> (j (l m -> (m (b (n o -> n) (n -> (b (o p q -> (o (r s -> (s (r p))) (r -> q) (r -> r))) (o -> (f (p q r -> q) (p -> p) l (p -> o))) (o p -> o) n n))) h)) (i g j k))) (f g h i -> i)) (f g h -> (g (h (i j -> j)))) (f -> f) (a (f g h -> (f (g h))) (f g -> (f (h i -> h))) (d (f g h i j -> (i (f (k l m -> l) (k -> k) (k -> k) (k l m n -> (l (o -> (m o n)))) (k -> (d (l m n o -> (m (p -> (n p o)))) (l -> (k (l (h (m n -> m) (m -> (h (n o p -> (n (q r -> (r (q o))) (q -> p) (q -> q))) (n -> (d (o -> n))) (n o -> n) m m))) l))) (l -> l))) (k -> k)) (g (k l -> (k (h k l))) i j))) (f g h -> h) (f g -> g) (f g h -> (h f g)) (f g h -> h) (d (f g h i j k -> (j (l m -> (m (b (n o -> n) (n -> (b (o p q -> (o (r s -> (s (r p))) (r -> q) (r -> r))) (o -> (f (p q r -> q) (p -> p) l (p -> o))) (o p -> o) n n))) h)) (i g j k))) (f g h i -> i)) (f g h i -> (g (j -> (h (j i))))) (f -> (f (d (g h i j k -> (j (g (l m n -> m) (l -> l) (l -> l) (l m n o -> (m (p -> (n p o)))) (l -> (d (m n o p -> (n (q -> (o q p)))) (m -> (l (m (i (n o -> n) (n -> (i (o p q -> (o (r s -> (s (r p))) (r -> q) (r -> r))) (o -> (d (p -> o))) (o p -> o) n n))) m))) (m -> m))) (l -> l)) (h (l m -> (l (i l m))) j k))) (g h i -> i) (g h -> h) (g h i -> (i g h)) (g h i -> i) (d (g h i j k l -> (k (m n -> (n (b (o p -> o) (o -> (b (p q r -> (p (s t -> (t (s q))) (s -> r) (s -> s))) (p -> (g (q r s -> r) (q -> q) m (q -> p))) (p q -> p) o o))) i)) (j h k l))) (g h i j -> j)) (g h i -> (h (j k -> (i (l m -> (l k (j l m))))))) (g -> (g (h i -> i))) (g -> g)))) (f -> f))) (f g h i j k -> (j (l -> (h l f)) (i g j k))) (f g h i -> i)) (f g h -> (g (h f))) (f -> f) e))))
Setter  = (a b c d -> (c (e f -> (e (g h i j k -> (j (g (l m n -> m) (l -> l) (l -> l) (l m n o -> (m (p -> (n p o)))) (l -> (e (m n o p -> (n (q -> (o q p)))) (m -> (l (m (i (n o -> n) (n -> (i (o p q -> (o (r s -> (s (r p))) (r -> q) (r -> r))) (o -> (e (p -> o))) (o p -> o) n n))) m))) (m -> m))) (l -> l)) (h (l m -> (l (i l m))) j k))) (g h i -> i) (g h -> h) (g h i -> (i g h)) (g h i -> i) (e (g h i j k l -> (k (m n -> (n (o -> (i d)) i)) (j h k l))) (g h i j -> j)) (g h i -> (i g h)) (g h i -> i) (e (g h i j k -> (j (g (l m n -> m) (l -> l) (l -> l) (l m n o -> (m (p -> (n p o)))) (l -> (e (m n o p -> (n (q -> (o q p)))) (m -> (l (m (i (n o -> n) (n -> (i (o p q -> (o (r s -> (s (r p))) (r -> q) (r -> r))) (o -> (e (p -> o))) (o p -> o) n n))) m))) (m -> m))) (l -> l)) (h (l m -> (l (i l m))) j k))) (g h i -> i) (g h -> h) (g h i -> (i g h)) (g h i -> i) (e (g h i j k l -> (k (m n -> (n (o -> (i d)) i)) (j h k l))) (g h i j -> j)) (g h i -> (h (i (j k -> k)))) (g -> g) (a (g h i -> (g (h i))) (g h -> (g (i j -> i))) (e (g h i j k -> (j (g (l m n -> m) (l -> l) (l -> l) (l m n o -> (m (p -> (n p o)))) (l -> (e (m n o p -> (n (q -> (o q p)))) (m -> (l (m (i (n o -> n) (n -> (i (o p q -> (o (r s -> (s (r p))) (r -> q) (r -> r))) (o -> (e (p -> o))) (o p -> o) n n))) m))) (m -> m))) (l -> l)) (h (l m -> (l (i l m))) j k))) (g h i -> i) (g h -> h) (g h i -> (i g h)) (g h i -> i) (e (g h i j k l -> (k (m n -> (n (o -> (i d)) i)) (j h k l))) (g h i j -> j)) (g h i j -> (h (k -> (i (k j))))) (g -> (g (e (h i j k l -> (k (h (m n o -> n) (m -> m) (m -> m) (m n o p -> (n (q -> (o q p)))) (m -> (e (n o p q -> (o (r -> (p r q)))) (n -> (m (n (j (o p -> o) (o -> (j (p q r -> (p (s t -> (t (s q))) (s -> r) (s -> s))) (p -> (e (q -> p))) (p q -> p) o o))) n))) (n -> n))) (m -> m)) (i (m n -> (m (j m n))) k l))) (h i j -> j) (h i -> i) (h i j -> (j h i)) (h i j -> j) (e (h i j k l m -> (l (n o -> (o (p -> (j d)) j)) (k i l m))) (h i j k -> k)) (h i j -> (i (k l -> (j (m n -> (m l (k m n))))))) (h -> (h (i j -> j))) (h -> h)))) (g -> g))) (g h i j k l -> (k (m -> (i m g)) (j h k l))) (g h i j -> j)) (g h i -> (h (i g))) (g -> g) f))))
Mutter  = (a b c d -> (c (e f -> (e (g h i j k -> (j (g (l m n -> m) (l -> l) (l -> l) (l m n o -> (m (p -> (n p o)))) (l -> (e (m n o p -> (n (q -> (o q p)))) (m -> (l (m (i (n o -> n) (n -> (i (o p q -> (o (r s -> (s (r p))) (r -> q) (r -> r))) (o -> (e (p -> o))) (o p -> o) n n))) m))) (m -> m))) (l -> l)) (h (l m -> (l (i l m))) j k))) (g h i -> i) (g h -> h) (g h i -> (i g h)) (g h i -> i) (e (g h i j k l -> (k (m n -> (n (o -> (i (d o))) i)) (j h k l))) (g h i j -> j)) (g h i -> (i g h)) (g h i -> i) (e (g h i j k -> (j (g (l m n -> m) (l -> l) (l -> l) (l m n o -> (m (p -> (n p o)))) (l -> (e (m n o p -> (n (q -> (o q p)))) (m -> (l (m (i (n o -> n) (n -> (i (o p q -> (o (r s -> (s (r p))) (r -> q) (r -> r))) (o -> (e (p -> o))) (o p -> o) n n))) m))) (m -> m))) (l -> l)) (h (l m -> (l (i l m))) j k))) (g h i -> i) (g h -> h) (g h i -> (i g h)) (g h i -> i) (e (g h i j k l -> (k (m n -> (n (o -> (i (d o))) i)) (j h k l))) (g h i j -> j)) (g h i -> (h (i (j k -> k)))) (g -> g) (a (g h i -> (g (h i))) (g h -> (g (i j -> i))) (e (g h i j k -> (j (g (l m n -> m) (l -> l) (l -> l) (l m n o -> (m (p -> (n p o)))) (l -> (e (m n o p -> (n (q -> (o q p)))) (m -> (l (m (i (n o -> n) (n -> (i (o p q -> (o (r s -> (s (r p))) (r -> q) (r -> r))) (o -> (e (p -> o))) (o p -> o) n n))) m))) (m -> m))) (l -> l)) (h (l m -> (l (i l m))) j k))) (g h i -> i) (g h -> h) (g h i -> (i g h)) (g h i -> i) (e (g h i j k l -> (k (m n -> (n (o -> (i (d o))) i)) (j h k l))) (g h i j -> j)) (g h i j -> (h (k -> (i (k j))))) (g -> (g (e (h i j k l -> (k (h (m n o -> n) (m -> m) (m -> m) (m n o p -> (n (q -> (o q p)))) (m -> (e (n o p q -> (o (r -> (p r q)))) (n -> (m (n (j (o p -> o) (o -> (j (p q r -> (p (s t -> (t (s q))) (s -> r) (s -> s))) (p -> (e (q -> p))) (p q -> p) o o))) n))) (n -> n))) (m -> m)) (i (m n -> (m (j m n))) k l))) (h i j -> j) (h i -> i) (h i j -> (j h i)) (h i j -> j) (e (h i j k l m -> (l (n o -> (o (p -> (j (d p))) j)) (k i l m))) (h i j k -> k)) (h i j -> (i (k l -> (j (m n -> (m l (k m n))))))) (h -> (h (i j -> j))) (h -> h)))) (g -> g))) (g h i j k l -> (k (m -> (i m g)) (j h k l))) (g h i j -> j)) (g h i -> (h (i g))) (g -> g) f))))
Case    = (a b -> (a (c -> c) (c d e f -> (d (g -> (e g f)))) (c -> (c (a (d -> (d (e f g h -> (f (i -> (g i (j -> h))))) (e -> e) (e -> e)))) b)) (c -> c)))
Tuplify = (a -> (a (b -> (b (c d e f g -> (f (c (h i j -> (i j (k l m n -> (l (m (k (o p -> p) n)))) (k -> k) (i j (k l m n -> (l (m n))) (k l -> (k (m n o -> (n (o m))) (m -> m) l)) (i j (k l m n -> (l (o -> (m (o n))))) (k -> (k (i j (l m n -> (m (o p -> (n (q r -> (q p (o q r))))))) (l -> (l (m n -> n))) (l -> l)))) (k -> k)))))) (d (h i -> (h (e h i))) f g))) (c d e -> e) (c d -> d) (c d e f -> f) (c d -> c) (c -> c) (c -> (b (d e f g h -> (g (d (i j k -> (j k (l m n o -> (m (n (l (p q -> q) o)))) (l -> l) (j k (l m n o -> (m (n o))) (l m -> (l (n o p -> (o (p n))) (n -> n) m)) (j k (l m n o -> (m (p -> (n (p o))))) (l -> (l (j k (m n o -> (n (p q -> (o (r s -> (r q (p r s))))))) (m -> (m (n o -> o))) (m -> m)))) (l -> l)))))) (e (i j -> (i (f i j))) g h))) (d e f -> f) (d e -> e) (d e f -> (e (f d))) (d -> d) c))))))
Listify = (a -> (a (b -> (b (c d e f g -> (f (c (h i j -> (i j (k l m n -> (l (m (k (o p -> p) n)))) (k -> k) (i j (k l m n -> (l (m n))) (k -> k) (i j (k l m n -> (l (o -> (m (o n))))) (k -> (k (i j (l m n -> (m (o p -> (n (q r -> (q p (o q r))))))) (l -> (l (m n -> n))) (l -> l)))) (k -> k)))))) (d (h i -> (h (e h i))) f g))) (c d e -> e) (c d -> d) (c d e f -> f) (c d -> c) (c -> c) (c -> (b (d e f g h -> (g (d (i j k -> (j k (l m n o -> (m (n (l (p q -> q) o)))) (l -> l) (j k (l m n o -> (m (n o))) (l -> l) (j k (l m n o -> (m (p -> (n (p o))))) (l -> (l (j k (m n o -> (n (p q -> (o (r s -> (r q (p r s))))))) (m -> (m (n o -> o))) (m -> m)))) (l -> l)))))) (e (i j -> (i (f i j))) g h))) (d e f -> f) (d e -> e) (d e f -> (e (f d))) (d -> d) c))))))
Show    = ((a b c d -> (d (e -> (e (f g h i j -> (i (f (k l m -> (l m (n o p q -> (o (p (n (r s -> s) q)))) (n -> n) (l m (n o p q -> (o (p q))) (n -> (n (o p q r -> r) (o p -> o) k (o p -> (a o (k o (n (q r s t -> (s b (s q (r s t)))) (q r -> r) (q r s -> (s q (r (t u v w -> (t v (u v w)))))) (q r s -> s) (q r s t -> (q s (r s t))) o (c o p))))))) (l m (n o p q -> (o (r -> (p (r q))))) (n -> (n (l m (o p q -> (p (r s -> (q (t u -> (t s (r t u))))))) (o -> (o (p q -> q))) (o -> o)))) (n -> n)))))) (g (k l -> (k (h k l))) i j))) (f g h -> h) (f g -> g) (f g h i -> i) (f g -> f) (f -> f) (f -> (e (g h i j k -> (j (g (l m n -> (m n (o p q r -> (p (q (o (s t -> t) r)))) (o -> o) (m n (o p q r -> (p (q r))) (o -> (o (p q r s -> s) (p q -> p) l (p q -> (a p (l p (o (r s t u -> (t b (t r (s t u)))) (r s -> s) (r s t -> (t r (s (u v w x -> (u w (v w x)))))) (r s t -> t) (r s t u -> (r t (s t u))) p (c p q))))))) (m n (o p q r -> (p (s -> (q (s r))))) (o -> (o (m n (p q r -> (q (s t -> (r (u v -> (u t (s u v))))))) (p -> (p (q r -> r))) (p -> p)))) (o -> o)))))) (h (l m -> (l (i l m))) j k))) (g h i -> i) (g h -> h) (g h i -> (h (i g))) (g -> g) f)))))) "(" " " ")")
-- Equals = ?????
